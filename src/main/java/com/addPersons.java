package com;


/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import classe.Personne;
import classe.bd;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Date;
import javax.swing.JOptionPane;
/**
 *
 * @author Mickele
 */
public class addPersons extends javax.swing.JFrame {

    /**
     * Creates new form addPersons
     */
    private javax.swing.JTextField IMField;
    private javax.swing.JTextField nomField;
    private javax.swing.JTextField prenomField;
    private com.toedter.calendar.JDateChooser dateField;
    private javax.swing.JComboBox<String> diplomeField;
    private javax.swing.JTextField contactField;
    private javax.swing.JComboBox<String> statutField;
    private javax.swing.JComboBox<String> situationField;
    private javax.swing.JTextField nomConjointField;
    private javax.swing.JTextField prenomConjointField;
    public addPersons() {
        initComponents();
        IMField = new javax.swing.JTextField();
        nomField = new javax.swing.JTextField();
        prenomField = new javax.swing.JTextField();
        dateField = new com.toedter.calendar.JDateChooser();
        diplomeField = new javax.swing.JComboBox<String>();
        contactField = new javax.swing.JTextField();
        statutField = new javax.swing.JComboBox<String>();
        situationField = new javax.swing.JComboBox<String>();
        nomConjointField = new javax.swing.JTextField();
        prenomConjointField = new javax.swing.JTextField();
        ImPerson.add(IMField);
        nomPerson.add(nomField);
        prenomPerson.add(prenomField);
        dateDeNaissance.add(dateField);
        diplome_person.add(diplomeField);
        contactPerson.add(contactField);
        Status.add(statutField);
        situationPerson.add(situationField);
        nomPersonConjoint.add(nomConjointField);
        prenomPersonConjoint.add(prenomConjointField);
        chargerDiplomes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        nomPerson = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        prenomPerson = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        contactPerson = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        nomPersonConjoint = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        prenomPersonConjoint = new javax.swing.JTextField();
        AjouterPersonne = new javax.swing.JButton();
        dateDeNaissance = new com.toedter.calendar.JDateChooser();
        Status = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        situationPerson = new javax.swing.JComboBox<>();
        ImPerson = new javax.swing.JTextField();
        diplome_person = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 725, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 56, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel1.setText("IM :");

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel3.setText("Nom : ");

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel4.setText("Prenom : ");

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel5.setText("Date de naissance : ");

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel6.setText("Diplome :");

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel7.setText("Contact :");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel8.setText("Status :");

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel9.setText("Nom conjoint : ");

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel10.setText("Prenom conjoint : ");

        AjouterPersonne.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        AjouterPersonne.setText("Ajouter");
        AjouterPersonne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjouterPersonneActionPerformed(evt);
            }
        });

        Status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Vivant", "Decédé" }));

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel11.setText("Situation :");

        situationPerson.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "divorcé(e)", "marié(e)", "veuf(ve)" }));

        diplome_person.setMaximumRowCount(10);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ImPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prenomPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(contactPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(4, 4, 4)
                        .addComponent(dateDeNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(5, 5, 5)
                        .addComponent(diplome_person, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prenomPersonConjoint, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nomPersonConjoint, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(AjouterPersonne, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(situationPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(175, 175, 175))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8)
                    .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ImPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel11)
                        .addComponent(situationPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(nomPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(prenomPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(dateDeNaissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(nomPersonConjoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(prenomPersonConjoint, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(diplome_person, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(contactPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AjouterPersonne))
                .addGap(0, 20, Short.MAX_VALUE))
        );

        nomPerson.getAccessibleContext().setAccessibleName("nomPerson");
        prenomPerson.getAccessibleContext().setAccessibleName("prenomPerson");
        diplome_person.getAccessibleContext().setAccessibleName("diplome_person");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AjouterPersonneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjouterPersonneActionPerformed
        String buttton = AjouterPersonne.getText();
        if(buttton.equals("Ajouter")){
            String IM = ImPerson.getText();
            String nom = nomPerson.getText();
            String prenoms = prenomPerson.getText();
            Date datenais = dateDeNaissance.getDate();
            String diplome = (String) diplome_person.getSelectedItem();
            String contact = contactPerson.getText();
            boolean statut =Status.getSelectedItem().toString().equals("Vivant");
            String situation = (String) situationPerson.getSelectedItem();
            String nomConjoint = nomPersonConjoint.getText();
            String prenomConjoint = prenomPersonConjoint.getText();
            if (situation.equals("divorcé(e)") || situation.equals("veuf(e)")) {
                  JOptionPane.showMessageDialog(null, "Nom et Prenom conjoint non nécessaire !");
                    Personne personneModifiee = new Personne(IM, nom, prenoms, datenais, diplome, contact, statut, situation, null, null);
                    Connection connection = bd.getConnection("jdbc:postgresql://localhost:5432/Java", "postgres", "madarauchiwa");
                    boolean modificationReussie = bd.ajouterPersonne(personneModifiee, connection);
                    if (modificationReussie) {
                        JOptionPane.showMessageDialog(null, "La personne a été ajoutée avec succès !");
                        dispose(); // ou d'autres actions à effectuer après un ajout réussi
                    } else {
                        JOptionPane.showMessageDialog(null, "Erreur lors de l'ajout de la personne !");
                    }
            }else if(IM.isEmpty() || nom.isEmpty() || prenoms.isEmpty() || contact.isEmpty() || datenais == null){
                JOptionPane.showMessageDialog(null, "Les champs ne doivent pas etre vide");
                return; 
            }else{
                Personne nouvellePersonne = new Personne(IM, nom, prenoms, datenais, diplome, contact, statut, situation, nomConjoint, prenomConjoint);
                Connection connection = bd.getConnection("jdbc:postgresql://localhost:5432/Java", "postgres", "madarauchiwa");
                boolean insertionReussie = bd.ajouterPersonne(nouvellePersonne,connection);
                    try {
                        connection.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                    // Vérification si l'ajout a réussi
                    if (insertionReussie) {
                        // Affichage d'un message de succès
                        JOptionPane.showMessageDialog(null, "La personne a été ajoutée avec succès !");
                        dispose();
                    } else {
                        // Affichage d'un message d'erreur
                        JOptionPane.showMessageDialog(null, "Erreur lors de l'ajout de la personne !");
                    }
            }
        }
        else if(buttton.equals("Modifier")){
                String IM = ImPerson.getText();
                String nom = nomPerson.getText();
                String prenoms = prenomPerson.getText();
                Date datenais = dateDeNaissance.getDate();
                String diplome = (String) diplome_person.getSelectedItem();
                String contact = contactPerson.getText();
                boolean statut = Status.getSelectedItem().toString().equals("Vivant");
                String situation = (String) situationPerson.getSelectedItem();
                String nomConjoint = nomPersonConjoint.getText();
                String prenomConjoint = prenomPersonConjoint.getText();
                if (situation.equals("divorcé(e)") || situation.equals("veuf(e)")) {
                    JOptionPane.showMessageDialog(null, "Nom et Prenom conjoint non nécessaire !");
                    Personne personneModifiee = new Personne(IM, nom, prenoms, datenais, diplome, contact, statut, situation, null, null);
                    Connection connection = bd.getConnection("jdbc:postgresql://localhost:5432/Java", "postgres", "madarauchiwa");
                    boolean modificationReussie = bd.modifierPersonne(personneModifiee, connection);
                    if (modificationReussie) {
                        JOptionPane.showMessageDialog(null, "La personne a été ajoutée avec succès !");
                        dispose(); // ou d'autres actions à effectuer après un ajout réussi
                    } else {
                        JOptionPane.showMessageDialog(null, "Erreur lors de l'ajout de la personne !");
                    }
                } else if (IM.isEmpty() || nom.isEmpty() || prenoms.isEmpty() || contact.isEmpty() || datenais == null) {
                    JOptionPane.showMessageDialog(null, "Les champs ne doivent pas être vides !");
                    return; 
                }else{
                    Personne personneModifiee = new Personne(IM, nom, prenoms, datenais, diplome, contact, statut, situation, nomConjoint, prenomConjoint);
                    Connection connection = bd.getConnection("jdbc:postgresql://localhost:5432/Java", "postgres", "madarauchiwa");
                    boolean modificationReussie = bd.modifierPersonne(personneModifiee, connection);
                    try {
                        connection.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                    // Vérification si la modification a réussi
                    if (modificationReussie) {
                        // Affichage d'un message de succès
                        JOptionPane.showMessageDialog(null, "La personne a été modifiée avec succès !");
                        dispose();
                    }
                }
                
        }
                
    }//GEN-LAST:event_AjouterPersonneActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addPersons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addPersons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addPersons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addPersons.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addPersons().setVisible(true);
            }
        });
    }
    // Méthode pour remplir les champs avec les données d'une personne sélectionnée
public void remplirChamps(String IM, String nom, String prenom, Date date, String diplome, String contact, Boolean statut, String situation, String nomConjoint, String prenomConjoint) {
        chargerDiplomes();
        ImPerson.setText(IM);
        nomPerson.setText(nom);
        prenomPerson.setText(prenom);
        dateDeNaissance.setDate(date);
        diplome_person.setSelectedItem(diplome);
        contactPerson.setText(contact);
        if (statut) {
        Status.setSelectedItem("Vivant");
        } else {
        Status.setSelectedItem("Decédé");
        }
        situationPerson.setSelectedItem(situation);
        nomPersonConjoint.setText(nomConjoint);
        prenomPersonConjoint.setText(prenomConjoint);
        AjouterPersonne.setText("Modifier");
        ImPerson.setEditable(false);
}
public final void chargerDiplomes() {
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    ResultSet resultSet = null;
    try {
        // Connexion à la base de données
        System.out.println("Connecting to the database...");
        connection = bd.getConnection("jdbc:postgresql://localhost:5432/Java", "postgres", "madarauchiwa");

        // Requête pour récupérer tous les diplômes de la table "tarif"
        String query = "SELECT DISTINCT diplome FROM tarif";
        System.out.println("Preparing statement...");
        preparedStatement = connection.prepareStatement(query);
        resultSet = preparedStatement.executeQuery();
        System.out.println("Executing query...");

        // Nettoyer le JComboBox avant d'ajouter de nouveaux éléments
        diplome_person.removeAllItems();
        System.out.println("Cleared JComboBox...");

        // Ajouter les diplômes au JComboBox
        while (resultSet.next()) {
            String diplome = resultSet.getString("diplome");
            diplome_person.addItem(diplome);
            System.out.println("Added diplome: " + diplome);
        }
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        // Fermer les ressources
        try {
            if (resultSet != null) {
                resultSet.close();
            }
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AjouterPersonne;
    private javax.swing.JTextField ImPerson;
    private javax.swing.JComboBox<String> Status;
    private javax.swing.JTextField contactPerson;
    private com.toedter.calendar.JDateChooser dateDeNaissance;
    private javax.swing.JComboBox<String> diplome_person;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField nomPerson;
    private javax.swing.JTextField nomPersonConjoint;
    private javax.swing.JTextField prenomPerson;
    private javax.swing.JTextField prenomPersonConjoint;
    private javax.swing.JComboBox<String> situationPerson;
    // End of variables declaration//GEN-END:variables
}


